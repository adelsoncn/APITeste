unit uConnection;

interface

uses
  uDataModule,
  DataSet.Serialize,
  DataSet.Serialize.Config,
  System.JSON,
  Data.DB, System.SysUtils;

type

  TConnTeste = class
    private

    public
      procedure create;
      class function GetData: TJsonObject;
  end;

implementation

{ TConnTeste }

procedure TConnTeste.create;
begin

end;

class function TConnTeste.GetData: TJsonObject;
var
  LResultDataSet: String;
  LJSONObject: TJsonObject;
  LJSONArray: TJSONArray;
begin
  // Configuração
  TDataSetSerializeConfig.GetInstance.Import.DecimalSeparator := '.';
  TDataSetSerializeConfig.GetInstance.CaseNameDefinition := cndLower;
  TDataSetSerializeConfig.GetInstance.DateInputIsUTC := true;
  TDataSetSerializeConfig.GetInstance.Export.FormatFloat := '0.00##';
  TDataSetSerializeConfig.GetInstance.Export.FormatCurrency := '0.00##';
  TDataSetSerializeConfig.GetInstance.Export.FormatDate := 'yyyy-mm-dd';
  TDataSetSerializeConfig.GetInstance.Export.FormatTime := 'hh:mm:ss';
  TDataSetSerializeConfig.GetInstance.Export.FormatDateTime := 'yyyy-mm-dd"T"hh:nn:ss.zzz';
  // Coleta de dados
  with DMTeste.FDQuery do begin
    SQL.Clear;
    SQL.Add('Select * from ESTADO');
    Active := true;
  end;
  // Retorno JSON
  try
    LJSONObject := TJsonObject.Create;
    LJSONObject.AddPair('sucess', TJSONTrue.Create);
    LJSONObject.AddPair('code', TJSONNumber.Create(200));
    LJSONArray := DMTeste.FDQuery.ToJSONArray();
    LJSONObject.AddPair('count', TJSONNumber.Create(DMTeste.FDQuery.RecordCount));
    LJSONObject.AddPair('data', LJSONArray);
  finally
    result := LJSONObject.ParseJSONValue(TEncoding.UTF8.GetBytes(LJSONObject.ToString), 0) as TJSONObject;
    LJSONArray.DisposeOf;
    LJSONObject.DisposeOf;
  end;
end;


end.
