unit uConnection;

interface

uses
  uDataModule,
  DataSet.Serialize,
  DataSet.Serialize.Config,
  System.JSON,
  Data.DB;

type

  TConnTeste = class
    private
       FConnected : Boolean;
       Procedure _ConfigDataSetSerialize;
    public
      function Connect: Boolean;
      function GetData: TJsonObject;
  end;

implementation

{ TConnTeste }

function TConnTeste.Connect: Boolean;
begin
  FConnected := not FConnected;
  DMTeste.FDConnection.Connected := Fconnected;
  Result := FConnected;
end;

function TConnTeste.GetData: TJsonObject;
var
  LResultDataSet: String;
  LJSONObject: TJsonObject;
  LJSONArray: TJSONArray;
begin
  _ConfigDataSetSerialize;
  with DMTeste.FDQuery do begin
    SQL.Clear;
    SQL.Add('Select * from ESTADO');
    Active := true;
  end;
  LJSONObject := TJsonObject.Create;
  LJSONObject.AddPair('sucess', TJSONTrue.Create);
  LJSONObject.AddPair('code', TJSONNumber.Create(200));
  LJSONArray := DMTeste.FDQuery.ToJSONArray();
  LJSONObject.AddPair('count', TJSONNumber.Create(DMTeste.FDQuery.RecordCount));
  LJSONObject.AddPair('docs', LJSONArray);
  result := LJSONObject.ParseJSONValue(TEncoding.UTF8.GetBytes(LJSONObject.ToString), 0) as TJSONObject;
end;

procedure TConnTeste._ConfigDataSetSerialize;
begin
  TDataSetSerializeConfig.GetInstance.Import.DecimalSeparator := '.';
  TDataSetSerializeConfig.GetInstance.CaseNameDefinition := cndLower;
  TDataSetSerializeConfig.GetInstance.DateInputIsUTC := true;
  TDataSetSerializeConfig.GetInstance.Export.FormatFloat := '0.00##';
  TDataSetSerializeConfig.GetInstance.Export.FormatCurrency := '0.00##';
  TDataSetSerializeConfig.GetInstance.Export.FormatDate := 'yyyy-mm-dd';
  TDataSetSerializeConfig.GetInstance.Export.FormatTime := 'hh:mm:ss';
  TDataSetSerializeConfig.GetInstance.Export.FormatDateTime := 'yyyy-mm-dd"T"hh:nn:ss.zzz';
end;




end.
